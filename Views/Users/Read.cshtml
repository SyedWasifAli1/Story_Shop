
@{
    ViewData["Title"] = "Read";
}

<a asp-action="Details" asp-route-id="@ViewBag.ProductId" asp-controller="Users">Back</a>
<style>





    /*
        .chatbox {
           border: 1px solid #ccc;
           border-radius: 5px;
           padding: 10px;
           height: 600px;
           display: flex;
           flex-direction: column;
       }
    */
    /* .messages {
           flex: 1;
           overflow-y: scroll;
           margin-bottom: 10px;
       } */

    .input {
        display: flex;
    }

    input[type="text"] {
        flex: 1;
        padding: 10px;
        font-size: 16px;
    }

    button {
        padding: 10px;
        font-size: 16px;
        margin-left: 5px;
    }

    #loader {
        height: 100%;
        width: 100%;
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        font-size: 20px;
        color: White;
        background-color: black;
        z-index: 9999;
    }
</style>
<div class="container mt-5">
    <div class="row">
        <div class="col-12">


            <div id="loader" style="display:none;">
                <p>Loading...</p>
            </div>
            <div class="chatbox">
                <div id="messages" class="messages"></div>

            </div>
        </div>
    </div>
</div>

<script>

    const GEMINI_API_KEY = "AIzaSyDQ8LQjnqDJ7FVGaiSIbGNf_Gf7sfc14V4";

    window.onload = function () {
        showLoader();
        sendMessage();
    };

    // Function to handle dropdown results
    function sendDropdownResults() {
        const topic = document.getElementById("topicDropdown").value;
        const framework = document.getElementById("frameworkDropdown").value;
        const language = document.getElementById("languageDropdown").value;

        const message = `Selected values:\n1. ${topic}\n2. ${framework}\n3. ${language}`;
        displayMessage("User", message);

        fetchGeminiResponse(message);
    }

    // Function to send a text message
    function sendMessage() {
        fetchGeminiResponse("  Book story @ViewBag.ProductName  introduce 1000 word with heading and paragrahp");
        const message = document.getElementById("messageInput").value;
        showLoader();
        if (message) {
            displayMessage("User", message);

            document.getElementById("messageInput").value = "";
        }
    }

    // Function to open file picker and send image
    function openFilePicker() {
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.onchange = async () => {
            const file = fileInput.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => {
                    displayMessage("User", `File: ${file.name}`);
                    fetchGeminiResponse("Describe this picture", reader.result);
                };
                reader.readAsDataURL(file);
            }
        };
        fileInput.click();
    }

    // Function to display messages in chat
    function displayMessage(user, text) {
        const messages = document.getElementById("messages");

        // Create a new div to contain the message
        const messageDiv = document.createElement("div");

        // Create a heading element for the user
        const userHeading = document.createElement("h3");
        userHeading.textContent = user;

        // Create a paragraph element for the message text
        const messageParagraph = document.createElement("p");
        messageParagraph.textContent = text;

        // Append the heading and paragraph to the message div
        messageDiv.appendChild(userHeading);
        messageDiv.appendChild(messageParagraph);

        // Append the message div to the messages container
        messages.appendChild(messageDiv);

        // Scroll to the bottom of the messages container
        messages.scrollTop = messages.scrollHeight;
    }
    async function fetchGeminiResponse(question) {
        try {
            showLoader();

            const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    contents: [{
                        role: "user",
                        parts: [{ text: question }]
                    }]
                })
            });

            const data = await response.json();


            const geminiResponse = data.candidates[0].content.parts[0].text;
            displayMessage("@ViewBag.ProductName", geminiResponse);


        } catch (error) {
            console.error("Error fetching Gemini response:", error);
            displayMessage(Name, "Error: Unable to get a response.");
        } finally {
            hideLoader();
        }
    }

    // Show loader
    function showLoader() {
        document.getElementById("loader").style.display = "block";
    }

    // Hide loader
    function hideLoader() {
        document.getElementById("loader").style.display = "none";
    }

</script>